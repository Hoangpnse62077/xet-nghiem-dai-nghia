

// ------------------------------------------------------------------------------------------------
// This code was generated by EntityFramework Reverse POCO Generator (http://www.reversepoco.com/).
// Created by Simon Hughes (https://about.me/simon.hughes).
//
// Do not make changes directly to this file - edit the template instead.
//
// The following connection settings were used to generate this file:
//     Configuration file:     "eLTMS.DataAccess\App.config"
//     Connection String Name: "FinalProjectContext"
//     Connection String:      "Data Source=hoangpnse62077.database.windows.net,1433;Initial Catalog=XetNghiemDaiNghia;User ID=hoang;password=**zapped**;"
// ------------------------------------------------------------------------------------------------
// Database Edition       : SQL Azure
// Database Engine Edition: Azure

//Customized By: Hoangpn
// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.6
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace eLTMS.DataAccess.Models
{
  
    using System.Linq;

    #region POCO classes
     public interface IDbModel 
     {
		string CreatedBy { get; set; } // CreatedBy (length: 50)
		System.DateTime CreatedDate { get; set; } // CreatedDate
		string UpdatedBy { get; set; } // UpdatedBy (length: 50)
		System.DateTime UpdatedDate { get; set; } // UpdatedDate
	 } 



    // Token
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class Token
    {
        public string TokenString { get; set; } // TokenString
        public bool? IsDeleted { get; set; } // IsDeleted
        public int TokenId { get; set; } // TokenID (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child AccountTokens where [AccountToken].[TokenID] point to this entity (FK_dbo.AccountToken_dbo.Token_TokenID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AccountToken> AccountTokens { get; set; } // AccountToken.FK_dbo.AccountToken_dbo.Token_TokenID

        public Token()
        {
            AccountTokens = new System.Collections.Generic.List<AccountToken>();
        }
    }

    // Table
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class Table
    {
        public int TableId { get; set; } // TableID (Primary key)
        public int? SampleGroupId { get; set; } // SampleGroupID
        public string TableName { get; set; } // TableName (length: 10)
        public bool? IsDeleted { get; set; } // IsDeleted

        // Reverse navigation

        /// <summary>
        /// Child SampleGettings where [SampleGetting].[TableID] point to this entity (FK_dbo.SampleGetting_dbo.Table_TableID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<SampleGetting> SampleGettings { get; set; } // SampleGetting.FK_dbo.SampleGetting_dbo.Table_TableID

        // Foreign keys

        /// <summary>
        /// Parent SampleGroup pointed by [Table].([SampleGroupId]) (FK_dbo.Table_dbo.SampleGroup_SampleGroupID)
        /// </summary>
        public virtual SampleGroup SampleGroup { get; set; } // FK_dbo.Table_dbo.SampleGroup_SampleGroupID

        public Table()
        {
            SampleGettings = new System.Collections.Generic.List<SampleGetting>();
        }
    }

    // database_firewall_rules
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class database_firewall_rules
    {
        public int Id { get; set; } // id (Primary key)
        public string Name { get; set; } // name (Primary key) (length: 128)
        public string StartIpAddress { get; set; } // start_ip_address (Primary key) (length: 45)
        public string EndIpAddress { get; set; } // end_ip_address (Primary key) (length: 45)
        public System.DateTime CreateDate { get; set; } // create_date (Primary key)
        public System.DateTime ModifyDate { get; set; } // modify_date (Primary key)
    }

    // SupplyType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class SupplyType
    {
        public int SuppliesTypeId { get; set; } // SuppliesTypeId (Primary key)
        public string SuppliesTypeName { get; set; } // SuppliesTypeName (length: 50)
        public bool? IsDeleted { get; set; } // IsDeleted

        // Reverse navigation

        /// <summary>
        /// Child Supplies where [Supply].[SuppliesTypeId] point to this entity (FK_dbo.Supply_dbo.SupplyType_SuppliesTypeId)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Supply> Supplies { get; set; } // Supply.FK_dbo.Supply_dbo.SupplyType_SuppliesTypeId

        public SupplyType()
        {
            Supplies = new System.Collections.Generic.List<Supply>();
        }
    }

    // Supply
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class Supply
    {
        public int SuppliesId { get; set; } // SuppliesId (Primary key)
        public string SuppliesCode { get; set; } // SuppliesCode (length: 50)
        public string SuppliesName { get; set; } // SuppliesName (length: 50)
        public int? SuppliesTypeId { get; set; } // SuppliesTypeId
        public int? Quantity { get; set; } // Quantity
        public string Unit { get; set; } // Unit (length: 20)
        public string Note { get; set; } // Note
        public bool? IsDeleted { get; set; } // IsDeleted

        // Reverse navigation

        /// <summary>
        /// Child ExportPaperDetails where [ExportPaperDetail].[SuppliesId] point to this entity (FK_dbo.ExportPaperDetail_dbo.Supply_SuppliesId)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ExportPaperDetail> ExportPaperDetails { get; set; } // ExportPaperDetail.FK_dbo.ExportPaperDetail_dbo.Supply_SuppliesId
        /// <summary>
        /// Child ImportPaperDetails where [ImportPaperDetail].[SuppliesId] point to this entity (FK_dbo.ImportPaperDetail_dbo.Supply_SuppliesId)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ImportPaperDetail> ImportPaperDetails { get; set; } // ImportPaperDetail.FK_dbo.ImportPaperDetail_dbo.Supply_SuppliesId

        // Foreign keys

        /// <summary>
        /// Parent SupplyType pointed by [Supply].([SuppliesTypeId]) (FK_dbo.Supply_dbo.SupplyType_SuppliesTypeId)
        /// </summary>
        public virtual SupplyType SupplyType { get; set; } // FK_dbo.Supply_dbo.SupplyType_SuppliesTypeId

        public Supply()
        {
            ExportPaperDetails = new System.Collections.Generic.List<ExportPaperDetail>();
            ImportPaperDetails = new System.Collections.Generic.List<ImportPaperDetail>();
        }
    }

    // Slot
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class Slot
    {
        public int? StartTime { get; set; } // StartTime
        public int? FinishTime { get; set; } // FinishTime
        public int SlotId { get; set; } // SlotID (Primary key)
        public string SlotName { get; set; } // SlotName (length: 10)
        public int? SampleGroupId { get; set; } // SampleGroupId
        public bool? IsDeleted { get; set; } // IsDeleted

        // Reverse navigation

        /// <summary>
        /// Child SampleGettings where [SampleGetting].[SlotID] point to this entity (FK_dbo.SampleGetting_dbo.Slot_SlotID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<SampleGetting> SampleGettings { get; set; } // SampleGetting.FK_dbo.SampleGetting_dbo.Slot_SlotID

        // Foreign keys

        /// <summary>
        /// Parent SampleGroup pointed by [Slot].([SampleGroupId]) (FK_dbo.Slot_dbo.SampleGroup_SampleGroupId)
        /// </summary>
        public virtual SampleGroup SampleGroup { get; set; } // FK_dbo.Slot_dbo.SampleGroup_SampleGroupId

        public Slot()
        {
            SampleGettings = new System.Collections.Generic.List<SampleGetting>();
        }
    }

    // SampleGroup
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class SampleGroup
    {
        public int SampleGroupId { get; set; } // SampleGroupID (Primary key)
        public string GroupName { get; set; } // GroupName (length: 100)
        public int? GettingDuration { get; set; } // GettingDuration
        public int? OpenTime { get; set; } // OpenTime
        public int? CloseTime { get; set; } // CloseTime
        public bool? IsDeleted { get; set; } // IsDeleted

        // Reverse navigation

        /// <summary>
        /// Child Samples where [Sample].[SampleGroupID] point to this entity (FK_dbo.Sample_dbo.SampleGroup_SampleGroupID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Sample> Samples { get; set; } // Sample.FK_dbo.Sample_dbo.SampleGroup_SampleGroupID
        /// <summary>
        /// Child Slots where [Slot].[SampleGroupId] point to this entity (FK_dbo.Slot_dbo.SampleGroup_SampleGroupId)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Slot> Slots { get; set; } // Slot.FK_dbo.Slot_dbo.SampleGroup_SampleGroupId
        /// <summary>
        /// Child Tables where [Table].[SampleGroupID] point to this entity (FK_dbo.Table_dbo.SampleGroup_SampleGroupID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Table> Tables { get; set; } // Table.FK_dbo.Table_dbo.SampleGroup_SampleGroupID

        public SampleGroup()
        {
            Samples = new System.Collections.Generic.List<Sample>();
            Slots = new System.Collections.Generic.List<Slot>();
            Tables = new System.Collections.Generic.List<Table>();
        }
    }

    // SampleGetting
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class SampleGetting
    {
        public int? AppointmentId { get; set; } // AppointmentID
        public int? SampleId { get; set; } // SampleID
        public string Status { get; set; } // Status (length: 20)
        public bool? IsDeleted { get; set; } // IsDeleted
        public string SampleGettingCode { get; set; } // SampleGettingCode (length: 20)
        public int SampleGettingId { get; set; } // SampleGettingID (Primary key)
        public bool? IsPaid { get; set; } // IsPaid
        public int? TableId { get; set; } // TableID
        public int? SlotId { get; set; } // SlotID
        public System.DateTime? GettingDate { get; set; } // GettingDate
        public int? OrderNumber { get; set; } // OrderNumber
        public bool? IsGot { get; set; } // IsGot

        // Reverse navigation

        /// <summary>
        /// Child LabTestings where [LabTesting].[SampleGettingID] point to this entity (FK_dbo.LabTesting_dbo.SampleGetting_SampleGettingID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<LabTesting> LabTestings { get; set; } // LabTesting.FK_dbo.LabTesting_dbo.SampleGetting_SampleGettingID

        // Foreign keys

        /// <summary>
        /// Parent Appointment pointed by [SampleGetting].([AppointmentId]) (FK_dbo.SampleGetting_dbo.Appointment_AppointmentID)
        /// </summary>
        public virtual Appointment Appointment { get; set; } // FK_dbo.SampleGetting_dbo.Appointment_AppointmentID

        /// <summary>
        /// Parent Sample pointed by [SampleGetting].([SampleId]) (FK_dbo.SampleGetting_dbo.Sample_SampleID)
        /// </summary>
        public virtual Sample Sample { get; set; } // FK_dbo.SampleGetting_dbo.Sample_SampleID

        /// <summary>
        /// Parent Slot pointed by [SampleGetting].([SlotId]) (FK_dbo.SampleGetting_dbo.Slot_SlotID)
        /// </summary>
        public virtual Slot Slot { get; set; } // FK_dbo.SampleGetting_dbo.Slot_SlotID

        /// <summary>
        /// Parent Table pointed by [SampleGetting].([TableId]) (FK_dbo.SampleGetting_dbo.Table_TableID)
        /// </summary>
        public virtual Table Table { get; set; } // FK_dbo.SampleGetting_dbo.Table_TableID

        public SampleGetting()
        {
            LabTestings = new System.Collections.Generic.List<LabTesting>();
        }
    }

    // Sample
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class Sample
    {
        public int SampleId { get; set; } // SampleID (Primary key)
        public int? SampleGroupId { get; set; } // SampleGroupID
        public string SampleName { get; set; } // SampleName (length: 20)
        public string Description { get; set; } // Description (length: 500)
        public bool? IsDeleted { get; set; } // IsDeleted

        // Reverse navigation

        /// <summary>
        /// Child LabTests where [LabTest].[SampleID] point to this entity (FK_dbo.LabTest_dbo.Sample_SampleID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<LabTest> LabTests { get; set; } // LabTest.FK_dbo.LabTest_dbo.Sample_SampleID
        /// <summary>
        /// Child SampleGettings where [SampleGetting].[SampleID] point to this entity (FK_dbo.SampleGetting_dbo.Sample_SampleID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<SampleGetting> SampleGettings { get; set; } // SampleGetting.FK_dbo.SampleGetting_dbo.Sample_SampleID

        // Foreign keys

        /// <summary>
        /// Parent SampleGroup pointed by [Sample].([SampleGroupId]) (FK_dbo.Sample_dbo.SampleGroup_SampleGroupID)
        /// </summary>
        public virtual SampleGroup SampleGroup { get; set; } // FK_dbo.Sample_dbo.SampleGroup_SampleGroupID

        public Sample()
        {
            LabTests = new System.Collections.Generic.List<LabTest>();
            SampleGettings = new System.Collections.Generic.List<SampleGetting>();
        }
    }

    // Role
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class Role
    {
        public int RoleId { get; set; } // RoleID (Primary key)
        public string RoleName { get; set; } // RoleName (length: 20)

        // Reverse navigation

        /// <summary>
        /// Child Accounts where [Account].[RoleID] point to this entity (FK_dbo.Account_dbo.Role_RoleID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Account> Accounts { get; set; } // Account.FK_dbo.Account_dbo.Role_RoleID

        public Role()
        {
            Accounts = new System.Collections.Generic.List<Account>();
        }
    }

    // PatientAccount
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class PatientAccount
    {
        public int PatientAccountId { get; set; } // PatientAccountID (Primary key)
        public int AccountId { get; set; } // AccountID
        public int PatientId { get; set; } // PatientID
        public bool? IsDeleted { get; set; } // IsDeleted

        // Foreign keys

        /// <summary>
        /// Parent Account pointed by [PatientAccount].([AccountId]) (FK_dbo.PatientAccount_dbo.Account_AccountID)
        /// </summary>
        public virtual Account Account { get; set; } // FK_dbo.PatientAccount_dbo.Account_AccountID

        /// <summary>
        /// Parent Patient pointed by [PatientAccount].([PatientId]) (FK_dbo.PatientAccount_dbo.Patient_PatientID)
        /// </summary>
        public virtual Patient Patient { get; set; } // FK_dbo.PatientAccount_dbo.Patient_PatientID
    }

    // Patient
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class Patient
    {
        public int PatientId { get; set; } // PatientID (Primary key)
        public string PatientCode { get; set; } // PatientCode (length: 20)
        public int? AccountId { get; set; } // AccountID
        public string FullName { get; set; } // FullName (length: 100)
        public string Gender { get; set; } // Gender (length: 10)
        public System.DateTime? DateOfBirth { get; set; } // DateOfBirth
        public string PhoneNumber { get; set; } // PhoneNumber (length: 20)
        public string HomeAddress { get; set; } // HomeAddress (length: 200)
        public string CompanyAddress { get; set; } // CompanyAddress (length: 200)
        public bool? IsDeleted { get; set; } // IsDeleted
        public bool? IsOnline { get; set; } // IsOnline
        public string IdentityCardNumber { get; set; } // IdentityCardNumber (length: 20)
        public string Age { get; set; } // Age (length: 50)

        // Reverse navigation

        /// <summary>
        /// Child Appointments where [Appointment].[PatientID] point to this entity (FK_dbo.Appointment_dbo.Patient_PatientID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Appointment> Appointments { get; set; } // Appointment.FK_dbo.Appointment_dbo.Patient_PatientID
        /// <summary>
        /// Child Feedbacks where [Feedback].[PatientID] point to this entity (FK_dbo.Feedback_dbo.Patient_PatientID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Feedback> Feedbacks { get; set; } // Feedback.FK_dbo.Feedback_dbo.Patient_PatientID
        /// <summary>
        /// Child LabTestResults where [LabTestResult].[PatientId] point to this entity (FK_LabTestResult_Patient1)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<LabTestResult> LabTestResults { get; set; } // LabTestResult.FK_LabTestResult_Patient1
        /// <summary>
        /// Child PatientAccounts where [PatientAccount].[PatientID] point to this entity (FK_dbo.PatientAccount_dbo.Patient_PatientID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<PatientAccount> PatientAccounts { get; set; } // PatientAccount.FK_dbo.PatientAccount_dbo.Patient_PatientID

        public Patient()
        {
            PatientAccounts = new System.Collections.Generic.List<PatientAccount>();
            LabTestResults = new System.Collections.Generic.List<LabTestResult>();
            Feedbacks = new System.Collections.Generic.List<Feedback>();
            Appointments = new System.Collections.Generic.List<Appointment>();
        }
    }

    // LabTestType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class LabTestType
    {
        public int LabTestTypeId { get; set; } // LabTestTypeId (Primary key)
        public string Name { get; set; } // Name (length: 50)
        public bool IsDeleted { get; set; } // IsDeleted

        // Reverse navigation

        /// <summary>
        /// Child LabTestDetails where [LabTestDetail].[LabTestTypeId] point to this entity (FK_LabTestDetail_LabTestType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<LabTestDetail> LabTestDetails { get; set; } // LabTestDetail.FK_LabTestDetail_LabTestType

        public LabTestType()
        {
            LabTestDetails = new System.Collections.Generic.List<LabTestDetail>();
        }
    }

    // LabTestResultDetail
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class LabTestResultDetail
    {
        public int LabTestResultDetail_ { get; set; } // LabTestResultDetail (Primary key)
        public int LabTestResultId { get; set; } // LabTestResultId
        public int? LabTestDetailId { get; set; } // LabTestDetailId
        public string Value { get; set; } // Value
        public decimal? Price { get; set; } // Price

        // Foreign keys

        /// <summary>
        /// Parent LabTestDetail pointed by [LabTestResultDetail].([LabTestDetailId]) (FK_LabTestResultDetail_LabTestDetail)
        /// </summary>
        public virtual LabTestDetail LabTestDetail { get; set; } // FK_LabTestResultDetail_LabTestDetail

        /// <summary>
        /// Parent LabTestResult pointed by [LabTestResultDetail].([LabTestResultId]) (FK_LabTestResultDetail_LabTestResult)
        /// </summary>
        public virtual LabTestResult LabTestResult { get; set; } // FK_LabTestResultDetail_LabTestResult
    }

    // LabTestResult
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class LabTestResult
    {
        public int LabTestResultId { get; set; } // LabTestResultId (Primary key)
        public int? PatientId { get; set; } // PatientId
        public System.DateTime? CreatedDate { get; set; } // CreatedDate
        public string Comment { get; set; } // Comment
        public decimal? TotalPrice { get; set; } // TotalPrice

        // Reverse navigation

        /// <summary>
        /// Child LabTestResultDetails where [LabTestResultDetail].[LabTestResultId] point to this entity (FK_LabTestResultDetail_LabTestResult)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<LabTestResultDetail> LabTestResultDetails { get; set; } // LabTestResultDetail.FK_LabTestResultDetail_LabTestResult

        // Foreign keys

        /// <summary>
        /// Parent Patient pointed by [LabTestResult].([PatientId]) (FK_LabTestResult_Patient1)
        /// </summary>
        public virtual Patient Patient { get; set; } // FK_LabTestResult_Patient1

        public LabTestResult()
        {
            LabTestResultDetails = new System.Collections.Generic.List<LabTestResultDetail>();
        }
    }

    // LabTestingIndex
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class LabTestingIndex
    {
        public int LabtTestingIndexId { get; set; } // LabtTestingIndexID (Primary key)
        public int? LabTestingId { get; set; } // LabTestingID
        public string IndexName { get; set; } // IndexName (length: 20)
        public string IndexValue { get; set; } // IndexValue (length: 50)
        public string LowNormalHigh { get; set; } // LowNormalHigh (length: 10)
        public string NormalRange { get; set; } // NormalRange (length: 50)
        public string Unit { get; set; } // Unit (length: 20)
        public bool? IsDeleted { get; set; } // IsDeleted

        // Foreign keys

        /// <summary>
        /// Parent LabTesting pointed by [LabTestingIndex].([LabTestingId]) (FK_dbo.LabTestingIndex_dbo.LabTesting_LabTestingID)
        /// </summary>
        public virtual LabTesting LabTesting { get; set; } // FK_dbo.LabTestingIndex_dbo.LabTesting_LabTestingID
    }

    // LabTesting
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class LabTesting
    {
        public int LabTestingId { get; set; } // LabTestingID (Primary key)
        public int? LabTestId { get; set; } // LabTestID
        public int? SampleGettingId { get; set; } // SampleGettingID
        public string Status { get; set; } // Status (length: 20)
        public bool? IsDeleted { get; set; } // IsDeleted
        public int? MachineSlot { get; set; } // MachineSlot

        // Reverse navigation

        /// <summary>
        /// Child LabTestingIndexes where [LabTestingIndex].[LabTestingID] point to this entity (FK_dbo.LabTestingIndex_dbo.LabTesting_LabTestingID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<LabTestingIndex> LabTestingIndexes { get; set; } // LabTestingIndex.FK_dbo.LabTestingIndex_dbo.LabTesting_LabTestingID

        // Foreign keys

        /// <summary>
        /// Parent LabTest pointed by [LabTesting].([LabTestId]) (FK_dbo.LabTesting_dbo.LabTest_LabTestID)
        /// </summary>
        public virtual LabTest LabTest { get; set; } // FK_dbo.LabTesting_dbo.LabTest_LabTestID

        /// <summary>
        /// Parent SampleGetting pointed by [LabTesting].([SampleGettingId]) (FK_dbo.LabTesting_dbo.SampleGetting_SampleGettingID)
        /// </summary>
        public virtual SampleGetting SampleGetting { get; set; } // FK_dbo.LabTesting_dbo.SampleGetting_SampleGettingID

        public LabTesting()
        {
            LabTestingIndexes = new System.Collections.Generic.List<LabTestingIndex>();
        }
    }

    // LabTestDetail
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class LabTestDetail
    {
        public string Name { get; set; } // Name (length: 50)
        public int LabTestDetailId { get; set; } // LabTestDetailId (Primary key)
        public int? LabTestTypeId { get; set; } // LabTestTypeId
        public string AverageValue { get; set; } // AverageValue (length: 50)
        public string Unit { get; set; } // Unit (length: 50)
        public decimal? Price { get; set; } // Price

        // Reverse navigation

        /// <summary>
        /// Child LabTestResultDetails where [LabTestResultDetail].[LabTestDetailId] point to this entity (FK_LabTestResultDetail_LabTestDetail)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<LabTestResultDetail> LabTestResultDetails { get; set; } // LabTestResultDetail.FK_LabTestResultDetail_LabTestDetail

        // Foreign keys

        /// <summary>
        /// Parent LabTestType pointed by [LabTestDetail].([LabTestTypeId]) (FK_LabTestDetail_LabTestType)
        /// </summary>
        public virtual LabTestType LabTestType { get; set; } // FK_LabTestDetail_LabTestType

        public LabTestDetail()
        {
            LabTestResultDetails = new System.Collections.Generic.List<LabTestResultDetail>();
        }
    }

    // LabTest
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class LabTest
    {
        public int LabTestId { get; set; } // LabTestID (Primary key)
        public string LabTestCode { get; set; } // LabTestCode (length: 20)
        public string LabTestName { get; set; } // LabTestName (length: 100)
        public string Description { get; set; } // Description (length: 500)
        public int? Price { get; set; } // Price
        public bool? IsDeleted { get; set; } // IsDeleted
        public int? SampleId { get; set; } // SampleID

        // Reverse navigation

        /// <summary>
        /// Child LabTestings where [LabTesting].[LabTestID] point to this entity (FK_dbo.LabTesting_dbo.LabTest_LabTestID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<LabTesting> LabTestings { get; set; } // LabTesting.FK_dbo.LabTesting_dbo.LabTest_LabTestID

        // Foreign keys

        /// <summary>
        /// Parent Sample pointed by [LabTest].([SampleId]) (FK_dbo.LabTest_dbo.Sample_SampleID)
        /// </summary>
        public virtual Sample Sample { get; set; } // FK_dbo.LabTest_dbo.Sample_SampleID

        public LabTest()
        {
            LabTestings = new System.Collections.Generic.List<LabTesting>();
        }
    }

    // ImportPaperDetail
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class ImportPaperDetail
    {
        public int ImportPaperDetailId { get; set; } // ImportPaperDetailId (Primary key)
        public int? ImportPaperId { get; set; } // ImportPaperId
        public int? SuppliesId { get; set; } // SuppliesId
        public string Unit { get; set; } // Unit (length: 50)
        public int? Quantity { get; set; } // Quantity
        public string Note { get; set; } // Note
        public bool? IsDeleted { get; set; } // IsDeleted

        // Foreign keys

        /// <summary>
        /// Parent ImportPaper pointed by [ImportPaperDetail].([ImportPaperId]) (FK_dbo.ImportPaperDetail_dbo.ImportPaper_ImportPaperId)
        /// </summary>
        public virtual ImportPaper ImportPaper { get; set; } // FK_dbo.ImportPaperDetail_dbo.ImportPaper_ImportPaperId

        /// <summary>
        /// Parent Supply pointed by [ImportPaperDetail].([SuppliesId]) (FK_dbo.ImportPaperDetail_dbo.Supply_SuppliesId)
        /// </summary>
        public virtual Supply Supply { get; set; } // FK_dbo.ImportPaperDetail_dbo.Supply_SuppliesId
    }

    // ImportPaper
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class ImportPaper
    {
        public int ImportPaperId { get; set; } // ImportPaperId (Primary key)
        public string ImportPaperCode { get; set; } // ImportPaperCode (length: 20)
        public System.DateTime? CreateDate { get; set; } // CreateDate
        public int? AccountId { get; set; } // AccountId
        public string Note { get; set; } // Note
        public bool? IsDeleted { get; set; } // IsDeleted

        // Reverse navigation

        /// <summary>
        /// Child ImportPaperDetails where [ImportPaperDetail].[ImportPaperId] point to this entity (FK_dbo.ImportPaperDetail_dbo.ImportPaper_ImportPaperId)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ImportPaperDetail> ImportPaperDetails { get; set; } // ImportPaperDetail.FK_dbo.ImportPaperDetail_dbo.ImportPaper_ImportPaperId

        public ImportPaper()
        {
            ImportPaperDetails = new System.Collections.Generic.List<ImportPaperDetail>();
        }
    }

    // HospitalSuggestion
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class HospitalSuggestion
    {
        public int HospitalSuggestionId { get; set; } // HospitalSuggestionID (Primary key)
        public string DiseaseName { get; set; } // DiseaseName
        public string HospitalList { get; set; } // HospitalList
        public string HospitalAdd { get; set; } // HospitalAdd
        public string HospitalPhone { get; set; } // HospitalPhone
        public bool? IsDeleted { get; set; } // IsDeleted
    }

    // Feedback
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class Feedback
    {
        public int FeedbackId { get; set; } // FeedbackID (Primary key)
        public int? PatientId { get; set; } // PatientID
        public int? EmployeeId { get; set; } // EmployeeID
        public string Content { get; set; } // Content (length: 500)
        public System.DateTime? ReceivedDateTime { get; set; } // ReceivedDateTime
        public bool? IsDeleted { get; set; } // IsDeleted
        public string Status { get; set; } // Status (length: 100)
        public int? StarRating { get; set; } // StarRating

        // Foreign keys

        /// <summary>
        /// Parent Employee pointed by [Feedback].([EmployeeId]) (FK_dbo.Feedback_dbo.Employee_EmployeeID)
        /// </summary>
        public virtual Employee Employee { get; set; } // FK_dbo.Feedback_dbo.Employee_EmployeeID

        /// <summary>
        /// Parent Patient pointed by [Feedback].([PatientId]) (FK_dbo.Feedback_dbo.Patient_PatientID)
        /// </summary>
        public virtual Patient Patient { get; set; } // FK_dbo.Feedback_dbo.Patient_PatientID
    }

    // ExportPaperDetail
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class ExportPaperDetail
    {
        public int ExportPaperDetailId { get; set; } // ExportPaperDetailId (Primary key)
        public int? ExportPaperId { get; set; } // ExportPaperId
        public int? SuppliesId { get; set; } // SuppliesId
        public string Unit { get; set; } // Unit (length: 50)
        public int? Quantity { get; set; } // Quantity
        public string Note { get; set; } // Note
        public bool? IsDeleted { get; set; } // IsDeleted

        // Foreign keys

        /// <summary>
        /// Parent ExportPaper pointed by [ExportPaperDetail].([ExportPaperId]) (FK_dbo.ExportPaperDetail_dbo.ExportPaper_ExportPaperId)
        /// </summary>
        public virtual ExportPaper ExportPaper { get; set; } // FK_dbo.ExportPaperDetail_dbo.ExportPaper_ExportPaperId

        /// <summary>
        /// Parent Supply pointed by [ExportPaperDetail].([SuppliesId]) (FK_dbo.ExportPaperDetail_dbo.Supply_SuppliesId)
        /// </summary>
        public virtual Supply Supply { get; set; } // FK_dbo.ExportPaperDetail_dbo.Supply_SuppliesId
    }

    // ExportPaper
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class ExportPaper
    {
        public int ExportPaperId { get; set; } // ExportPaperId (Primary key)
        public string ExportPaperCode { get; set; } // ExportPaperCode (length: 20)
        public System.DateTime? CreateDate { get; set; } // CreateDate
        public int? AccountId { get; set; } // AccountId
        public string Note { get; set; } // Note
        public bool? Status { get; set; } // Status
        public bool? IsDeleted { get; set; } // IsDeleted

        // Reverse navigation

        /// <summary>
        /// Child ExportPaperDetails where [ExportPaperDetail].[ExportPaperId] point to this entity (FK_dbo.ExportPaperDetail_dbo.ExportPaper_ExportPaperId)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ExportPaperDetail> ExportPaperDetails { get; set; } // ExportPaperDetail.FK_dbo.ExportPaperDetail_dbo.ExportPaper_ExportPaperId

        public ExportPaper()
        {
            ExportPaperDetails = new System.Collections.Generic.List<ExportPaperDetail>();
        }
    }

    // Employee
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class Employee
    {
        public int EmployeeId { get; set; } // EmployeeID (Primary key)
        public int? AccountId { get; set; } // AccountID
        public string Status { get; set; } // Status (length: 20)
        public string FullName { get; set; } // FullName (length: 100)
        public string Gender { get; set; } // Gender (length: 10)
        public System.DateTime? DateOfBirth { get; set; } // DateOfBirth
        public string HomeAddress { get; set; } // HomeAddress (length: 200)
        public System.DateTime? StartDate { get; set; } // StartDate
        public string PhoneNumber { get; set; } // PhoneNumber (length: 20)
        public bool? IsDeleted { get; set; } // IsDeleted

        // Reverse navigation

        /// <summary>
        /// Child Appointments where [Appointment].[DoctorID] point to this entity (FK_dbo.Appointment_dbo.Employee_DoctorID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Appointment> Appointments { get; set; } // Appointment.FK_dbo.Appointment_dbo.Employee_DoctorID
        /// <summary>
        /// Child Feedbacks where [Feedback].[EmployeeID] point to this entity (FK_dbo.Feedback_dbo.Employee_EmployeeID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Feedback> Feedbacks { get; set; } // Feedback.FK_dbo.Feedback_dbo.Employee_EmployeeID

        // Foreign keys

        /// <summary>
        /// Parent Account pointed by [Employee].([AccountId]) (FK_dbo.Employee_dbo.Account_AccountID)
        /// </summary>
        public virtual Account Account { get; set; } // FK_dbo.Employee_dbo.Account_AccountID

        public Employee()
        {
            Appointments = new System.Collections.Generic.List<Appointment>();
            Feedbacks = new System.Collections.Generic.List<Feedback>();
        }
    }

    // Appointment
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class Appointment
    {
        public string AppointmentCode { get; set; } // AppointmentCode (length: 20)
        public int? PatientId { get; set; } // PatientID
        public int? DoctorId { get; set; } // DoctorID
        public bool? IsEmergency { get; set; } // IsEmergency
        public string TestPurpose { get; set; } // TestPurpose (length: 100)
        public System.DateTime? EnterTime { get; set; } // EnterTime
        public System.DateTime? ReturnTime { get; set; } // ReturnTime
        public string Conclusion { get; set; } // Conclusion (length: 500)
        public bool? ResultApproved { get; set; } // ResultApproved
        public string Status { get; set; } // Status (length: 20)
        public bool? IsDeleted { get; set; } // IsDeleted
        public int AppointmentId { get; set; } // AppointmentID (Primary key)
        public bool? IsPaid { get; set; } // IsPaid
        public string DoctorComment { get; set; } // DoctorComment
        public bool? IsOnline { get; set; } // IsOnline

        // Reverse navigation

        /// <summary>
        /// Child SampleGettings where [SampleGetting].[AppointmentID] point to this entity (FK_dbo.SampleGetting_dbo.Appointment_AppointmentID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<SampleGetting> SampleGettings { get; set; } // SampleGetting.FK_dbo.SampleGetting_dbo.Appointment_AppointmentID

        // Foreign keys

        /// <summary>
        /// Parent Employee pointed by [Appointment].([DoctorId]) (FK_dbo.Appointment_dbo.Employee_DoctorID)
        /// </summary>
        public virtual Employee Employee { get; set; } // FK_dbo.Appointment_dbo.Employee_DoctorID

        /// <summary>
        /// Parent Patient pointed by [Appointment].([PatientId]) (FK_dbo.Appointment_dbo.Patient_PatientID)
        /// </summary>
        public virtual Patient Patient { get; set; } // FK_dbo.Appointment_dbo.Patient_PatientID

        public Appointment()
        {
            SampleGettings = new System.Collections.Generic.List<SampleGetting>();
        }
    }

    // AccountToken
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class AccountToken
    {
        public int AccountTokenId { get; set; } // AccountTokenID (Primary key)
        public int AccountId { get; set; } // AccountID
        public int TokenId { get; set; } // TokenID
        public bool? IsDeleted { get; set; } // IsDeleted

        // Foreign keys

        /// <summary>
        /// Parent Account pointed by [AccountToken].([AccountId]) (FK_dbo.AccountToken_dbo.Account_AccountID)
        /// </summary>
        public virtual Account Account { get; set; } // FK_dbo.AccountToken_dbo.Account_AccountID

        /// <summary>
        /// Parent Token pointed by [AccountToken].([TokenId]) (FK_dbo.AccountToken_dbo.Token_TokenID)
        /// </summary>
        public virtual Token Token { get; set; } // FK_dbo.AccountToken_dbo.Token_TokenID
    }

    // Account
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class Account
    {
        public int AccountId { get; set; } // AccountID (Primary key)
        public int? RoleId { get; set; } // RoleID
        public string Email { get; set; } // Email (length: 255)
        public string Password { get; set; } // Password (length: 128)
        public string PhoneNumber { get; set; } // PhoneNumber (length: 20)
        public string AvatarUrl { get; set; } // AvatarURL (length: 500)
        public bool? IsDeleted { get; set; } // IsDeleted
        public string IdentityCardNumber { get; set; } // IdentityCardNumber (length: 20)
        public string FullName { get; set; } // FullName (length: 50)

        // Reverse navigation

        /// <summary>
        /// Child AccountTokens where [AccountToken].[AccountID] point to this entity (FK_dbo.AccountToken_dbo.Account_AccountID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AccountToken> AccountTokens { get; set; } // AccountToken.FK_dbo.AccountToken_dbo.Account_AccountID
        /// <summary>
        /// Child Employees where [Employee].[AccountID] point to this entity (FK_dbo.Employee_dbo.Account_AccountID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Employee> Employees { get; set; } // Employee.FK_dbo.Employee_dbo.Account_AccountID
        /// <summary>
        /// Child PatientAccounts where [PatientAccount].[AccountID] point to this entity (FK_dbo.PatientAccount_dbo.Account_AccountID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<PatientAccount> PatientAccounts { get; set; } // PatientAccount.FK_dbo.PatientAccount_dbo.Account_AccountID

        // Foreign keys

        /// <summary>
        /// Parent Role pointed by [Account].([RoleId]) (FK_dbo.Account_dbo.Role_RoleID)
        /// </summary>
        public virtual Role Role { get; set; } // FK_dbo.Account_dbo.Role_RoleID

        public Account()
        {
            AccountTokens = new System.Collections.Generic.List<AccountToken>();
            Employees = new System.Collections.Generic.List<Employee>();
            PatientAccounts = new System.Collections.Generic.List<PatientAccount>();
        }
    }

    #endregion

    #region POCO Configuration

    // Account
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class AccountConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Account>
    {
        public AccountConfiguration()
            : this("dbo")
        {
        }

        public AccountConfiguration(string schema)
        {
            ToTable("Account", schema);
            HasKey(x => x.AccountId);

            Property(x => x.AccountId).HasColumnName(@"AccountID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.RoleId).HasColumnName(@"RoleID").HasColumnType("int").IsOptional();
            Property(x => x.Email).HasColumnName(@"Email").HasColumnType("nvarchar").IsOptional().HasMaxLength(255);
            Property(x => x.Password).HasColumnName(@"Password").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.PhoneNumber).HasColumnName(@"PhoneNumber").HasColumnType("nvarchar").IsOptional().HasMaxLength(20);
            Property(x => x.AvatarUrl).HasColumnName(@"AvatarURL").HasColumnType("nvarchar").IsOptional().HasMaxLength(500);
            Property(x => x.IsDeleted).HasColumnName(@"IsDeleted").HasColumnType("bit").IsOptional();
            Property(x => x.IdentityCardNumber).HasColumnName(@"IdentityCardNumber").HasColumnType("nvarchar").IsOptional().HasMaxLength(20);
            Property(x => x.FullName).HasColumnName(@"FullName").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);

            // Foreign keys
            HasOptional(a => a.Role).WithMany(b => b.Accounts).HasForeignKey(c => c.RoleId).WillCascadeOnDelete(false); // FK_dbo.Account_dbo.Role_RoleID
        }
    }

    // AccountToken
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class AccountTokenConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AccountToken>
    {
        public AccountTokenConfiguration()
            : this("dbo")
        {
        }

        public AccountTokenConfiguration(string schema)
        {
            ToTable("AccountToken", schema);
            HasKey(x => x.AccountTokenId);

            Property(x => x.AccountTokenId).HasColumnName(@"AccountTokenID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.AccountId).HasColumnName(@"AccountID").HasColumnType("int").IsRequired();
            Property(x => x.TokenId).HasColumnName(@"TokenID").HasColumnType("int").IsRequired();
            Property(x => x.IsDeleted).HasColumnName(@"IsDeleted").HasColumnType("bit").IsOptional();

            // Foreign keys
            HasRequired(a => a.Account).WithMany(b => b.AccountTokens).HasForeignKey(c => c.AccountId); // FK_dbo.AccountToken_dbo.Account_AccountID
            HasRequired(a => a.Token).WithMany(b => b.AccountTokens).HasForeignKey(c => c.TokenId); // FK_dbo.AccountToken_dbo.Token_TokenID
        }
    }

    // Appointment
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class AppointmentConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Appointment>
    {
        public AppointmentConfiguration()
            : this("dbo")
        {
        }

        public AppointmentConfiguration(string schema)
        {
            ToTable("Appointment", schema);
            HasKey(x => x.AppointmentId);

            Property(x => x.AppointmentCode).HasColumnName(@"AppointmentCode").HasColumnType("nvarchar").IsOptional().HasMaxLength(20);
            Property(x => x.PatientId).HasColumnName(@"PatientID").HasColumnType("int").IsOptional();
            Property(x => x.DoctorId).HasColumnName(@"DoctorID").HasColumnType("int").IsOptional();
            Property(x => x.IsEmergency).HasColumnName(@"IsEmergency").HasColumnType("bit").IsOptional();
            Property(x => x.TestPurpose).HasColumnName(@"TestPurpose").HasColumnType("nvarchar").IsOptional().HasMaxLength(100);
            Property(x => x.EnterTime).HasColumnName(@"EnterTime").HasColumnType("datetime").IsOptional();
            Property(x => x.ReturnTime).HasColumnName(@"ReturnTime").HasColumnType("datetime").IsOptional();
            Property(x => x.Conclusion).HasColumnName(@"Conclusion").HasColumnType("nvarchar").IsOptional().HasMaxLength(500);
            Property(x => x.ResultApproved).HasColumnName(@"ResultApproved").HasColumnType("bit").IsOptional();
            Property(x => x.Status).HasColumnName(@"Status").HasColumnType("nvarchar").IsOptional().HasMaxLength(20);
            Property(x => x.IsDeleted).HasColumnName(@"IsDeleted").HasColumnType("bit").IsOptional();
            Property(x => x.AppointmentId).HasColumnName(@"AppointmentID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.IsPaid).HasColumnName(@"IsPaid").HasColumnType("bit").IsOptional();
            Property(x => x.DoctorComment).HasColumnName(@"DoctorComment").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.IsOnline).HasColumnName(@"IsOnline").HasColumnType("bit").IsOptional();

            // Foreign keys
            HasOptional(a => a.Employee).WithMany(b => b.Appointments).HasForeignKey(c => c.DoctorId).WillCascadeOnDelete(false); // FK_dbo.Appointment_dbo.Employee_DoctorID
            HasOptional(a => a.Patient).WithMany(b => b.Appointments).HasForeignKey(c => c.PatientId).WillCascadeOnDelete(false); // FK_dbo.Appointment_dbo.Patient_PatientID
        }
    }

    // Employee
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class EmployeeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Employee>
    {
        public EmployeeConfiguration()
            : this("dbo")
        {
        }

        public EmployeeConfiguration(string schema)
        {
            ToTable("Employee", schema);
            HasKey(x => x.EmployeeId);

            Property(x => x.EmployeeId).HasColumnName(@"EmployeeID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.AccountId).HasColumnName(@"AccountID").HasColumnType("int").IsOptional();
            Property(x => x.Status).HasColumnName(@"Status").HasColumnType("nvarchar").IsOptional().HasMaxLength(20);
            Property(x => x.FullName).HasColumnName(@"FullName").HasColumnType("nvarchar").IsOptional().HasMaxLength(100);
            Property(x => x.Gender).HasColumnName(@"Gender").HasColumnType("nvarchar").IsOptional().HasMaxLength(10);
            Property(x => x.DateOfBirth).HasColumnName(@"DateOfBirth").HasColumnType("date").IsOptional();
            Property(x => x.HomeAddress).HasColumnName(@"HomeAddress").HasColumnType("nvarchar").IsOptional().HasMaxLength(200);
            Property(x => x.StartDate).HasColumnName(@"StartDate").HasColumnType("date").IsOptional();
            Property(x => x.PhoneNumber).HasColumnName(@"PhoneNumber").HasColumnType("nvarchar").IsOptional().HasMaxLength(20);
            Property(x => x.IsDeleted).HasColumnName(@"IsDeleted").HasColumnType("bit").IsOptional();

            // Foreign keys
            HasOptional(a => a.Account).WithMany(b => b.Employees).HasForeignKey(c => c.AccountId).WillCascadeOnDelete(false); // FK_dbo.Employee_dbo.Account_AccountID
        }
    }

    // ExportPaper
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class ExportPaperConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ExportPaper>
    {
        public ExportPaperConfiguration()
            : this("dbo")
        {
        }

        public ExportPaperConfiguration(string schema)
        {
            ToTable("ExportPaper", schema);
            HasKey(x => x.ExportPaperId);

            Property(x => x.ExportPaperId).HasColumnName(@"ExportPaperId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.ExportPaperCode).HasColumnName(@"ExportPaperCode").HasColumnType("nvarchar").IsOptional().HasMaxLength(20);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsOptional();
            Property(x => x.AccountId).HasColumnName(@"AccountId").HasColumnType("int").IsOptional();
            Property(x => x.Note).HasColumnName(@"Note").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.Status).HasColumnName(@"Status").HasColumnType("bit").IsOptional();
            Property(x => x.IsDeleted).HasColumnName(@"IsDeleted").HasColumnType("bit").IsOptional();
        }
    }

    // ExportPaperDetail
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class ExportPaperDetailConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ExportPaperDetail>
    {
        public ExportPaperDetailConfiguration()
            : this("dbo")
        {
        }

        public ExportPaperDetailConfiguration(string schema)
        {
            ToTable("ExportPaperDetail", schema);
            HasKey(x => x.ExportPaperDetailId);

            Property(x => x.ExportPaperDetailId).HasColumnName(@"ExportPaperDetailId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.ExportPaperId).HasColumnName(@"ExportPaperId").HasColumnType("int").IsOptional();
            Property(x => x.SuppliesId).HasColumnName(@"SuppliesId").HasColumnType("int").IsOptional();
            Property(x => x.Unit).HasColumnName(@"Unit").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.Quantity).HasColumnName(@"Quantity").HasColumnType("int").IsOptional();
            Property(x => x.Note).HasColumnName(@"Note").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.IsDeleted).HasColumnName(@"IsDeleted").HasColumnType("bit").IsOptional();

            // Foreign keys
            HasOptional(a => a.ExportPaper).WithMany(b => b.ExportPaperDetails).HasForeignKey(c => c.ExportPaperId).WillCascadeOnDelete(false); // FK_dbo.ExportPaperDetail_dbo.ExportPaper_ExportPaperId
            HasOptional(a => a.Supply).WithMany(b => b.ExportPaperDetails).HasForeignKey(c => c.SuppliesId).WillCascadeOnDelete(false); // FK_dbo.ExportPaperDetail_dbo.Supply_SuppliesId
        }
    }

    // Feedback
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class FeedbackConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Feedback>
    {
        public FeedbackConfiguration()
            : this("dbo")
        {
        }

        public FeedbackConfiguration(string schema)
        {
            ToTable("Feedback", schema);
            HasKey(x => x.FeedbackId);

            Property(x => x.FeedbackId).HasColumnName(@"FeedbackID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.PatientId).HasColumnName(@"PatientID").HasColumnType("int").IsOptional();
            Property(x => x.EmployeeId).HasColumnName(@"EmployeeID").HasColumnType("int").IsOptional();
            Property(x => x.Content).HasColumnName(@"Content").HasColumnType("nvarchar").IsOptional().HasMaxLength(500);
            Property(x => x.ReceivedDateTime).HasColumnName(@"ReceivedDateTime").HasColumnType("datetime").IsOptional();
            Property(x => x.IsDeleted).HasColumnName(@"IsDeleted").HasColumnType("bit").IsOptional();
            Property(x => x.Status).HasColumnName(@"Status").HasColumnType("nvarchar").IsOptional().HasMaxLength(100);
            Property(x => x.StarRating).HasColumnName(@"StarRating").HasColumnType("int").IsOptional();

            // Foreign keys
            HasOptional(a => a.Employee).WithMany(b => b.Feedbacks).HasForeignKey(c => c.EmployeeId).WillCascadeOnDelete(false); // FK_dbo.Feedback_dbo.Employee_EmployeeID
            HasOptional(a => a.Patient).WithMany(b => b.Feedbacks).HasForeignKey(c => c.PatientId).WillCascadeOnDelete(false); // FK_dbo.Feedback_dbo.Patient_PatientID
        }
    }

    // HospitalSuggestion
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class HospitalSuggestionConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<HospitalSuggestion>
    {
        public HospitalSuggestionConfiguration()
            : this("dbo")
        {
        }

        public HospitalSuggestionConfiguration(string schema)
        {
            ToTable("HospitalSuggestion", schema);
            HasKey(x => x.HospitalSuggestionId);

            Property(x => x.HospitalSuggestionId).HasColumnName(@"HospitalSuggestionID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.DiseaseName).HasColumnName(@"DiseaseName").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.HospitalList).HasColumnName(@"HospitalList").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.HospitalAdd).HasColumnName(@"HospitalAdd").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.HospitalPhone).HasColumnName(@"HospitalPhone").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.IsDeleted).HasColumnName(@"IsDeleted").HasColumnType("bit").IsOptional();
        }
    }

    // ImportPaper
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class ImportPaperConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ImportPaper>
    {
        public ImportPaperConfiguration()
            : this("dbo")
        {
        }

        public ImportPaperConfiguration(string schema)
        {
            ToTable("ImportPaper", schema);
            HasKey(x => x.ImportPaperId);

            Property(x => x.ImportPaperId).HasColumnName(@"ImportPaperId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.ImportPaperCode).HasColumnName(@"ImportPaperCode").HasColumnType("nvarchar").IsOptional().HasMaxLength(20);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsOptional();
            Property(x => x.AccountId).HasColumnName(@"AccountId").HasColumnType("int").IsOptional();
            Property(x => x.Note).HasColumnName(@"Note").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.IsDeleted).HasColumnName(@"IsDeleted").HasColumnType("bit").IsOptional();
        }
    }

    // ImportPaperDetail
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class ImportPaperDetailConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ImportPaperDetail>
    {
        public ImportPaperDetailConfiguration()
            : this("dbo")
        {
        }

        public ImportPaperDetailConfiguration(string schema)
        {
            ToTable("ImportPaperDetail", schema);
            HasKey(x => x.ImportPaperDetailId);

            Property(x => x.ImportPaperDetailId).HasColumnName(@"ImportPaperDetailId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.ImportPaperId).HasColumnName(@"ImportPaperId").HasColumnType("int").IsOptional();
            Property(x => x.SuppliesId).HasColumnName(@"SuppliesId").HasColumnType("int").IsOptional();
            Property(x => x.Unit).HasColumnName(@"Unit").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.Quantity).HasColumnName(@"Quantity").HasColumnType("int").IsOptional();
            Property(x => x.Note).HasColumnName(@"Note").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.IsDeleted).HasColumnName(@"IsDeleted").HasColumnType("bit").IsOptional();

            // Foreign keys
            HasOptional(a => a.ImportPaper).WithMany(b => b.ImportPaperDetails).HasForeignKey(c => c.ImportPaperId).WillCascadeOnDelete(false); // FK_dbo.ImportPaperDetail_dbo.ImportPaper_ImportPaperId
            HasOptional(a => a.Supply).WithMany(b => b.ImportPaperDetails).HasForeignKey(c => c.SuppliesId).WillCascadeOnDelete(false); // FK_dbo.ImportPaperDetail_dbo.Supply_SuppliesId
        }
    }

    // LabTest
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class LabTestConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<LabTest>
    {
        public LabTestConfiguration()
            : this("dbo")
        {
        }

        public LabTestConfiguration(string schema)
        {
            ToTable("LabTest", schema);
            HasKey(x => x.LabTestId);

            Property(x => x.LabTestId).HasColumnName(@"LabTestID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.LabTestCode).HasColumnName(@"LabTestCode").HasColumnType("nvarchar").IsOptional().HasMaxLength(20);
            Property(x => x.LabTestName).HasColumnName(@"LabTestName").HasColumnType("nvarchar").IsOptional().HasMaxLength(100);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsOptional().HasMaxLength(500);
            Property(x => x.Price).HasColumnName(@"Price").HasColumnType("int").IsOptional();
            Property(x => x.IsDeleted).HasColumnName(@"IsDeleted").HasColumnType("bit").IsOptional();
            Property(x => x.SampleId).HasColumnName(@"SampleID").HasColumnType("int").IsOptional();

            // Foreign keys
            HasOptional(a => a.Sample).WithMany(b => b.LabTests).HasForeignKey(c => c.SampleId).WillCascadeOnDelete(false); // FK_dbo.LabTest_dbo.Sample_SampleID
        }
    }

    // LabTestDetail
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class LabTestDetailConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<LabTestDetail>
    {
        public LabTestDetailConfiguration()
            : this("dbo")
        {
        }

        public LabTestDetailConfiguration(string schema)
        {
            ToTable("LabTestDetail", schema);
            HasKey(x => x.LabTestDetailId);

            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.LabTestDetailId).HasColumnName(@"LabTestDetailId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.LabTestTypeId).HasColumnName(@"LabTestTypeId").HasColumnType("int").IsOptional();
            Property(x => x.AverageValue).HasColumnName(@"AverageValue").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.Unit).HasColumnName(@"Unit").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.Price).HasColumnName(@"Price").HasColumnType("decimal").IsOptional().HasPrecision(18,0);

            // Foreign keys
            HasOptional(a => a.LabTestType).WithMany(b => b.LabTestDetails).HasForeignKey(c => c.LabTestTypeId).WillCascadeOnDelete(false); // FK_LabTestDetail_LabTestType
        }
    }

    // LabTesting
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class LabTestingConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<LabTesting>
    {
        public LabTestingConfiguration()
            : this("dbo")
        {
        }

        public LabTestingConfiguration(string schema)
        {
            ToTable("LabTesting", schema);
            HasKey(x => x.LabTestingId);

            Property(x => x.LabTestingId).HasColumnName(@"LabTestingID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.LabTestId).HasColumnName(@"LabTestID").HasColumnType("int").IsOptional();
            Property(x => x.SampleGettingId).HasColumnName(@"SampleGettingID").HasColumnType("int").IsOptional();
            Property(x => x.Status).HasColumnName(@"Status").HasColumnType("nvarchar").IsOptional().HasMaxLength(20);
            Property(x => x.IsDeleted).HasColumnName(@"IsDeleted").HasColumnType("bit").IsOptional();
            Property(x => x.MachineSlot).HasColumnName(@"MachineSlot").HasColumnType("int").IsOptional();

            // Foreign keys
            HasOptional(a => a.LabTest).WithMany(b => b.LabTestings).HasForeignKey(c => c.LabTestId).WillCascadeOnDelete(false); // FK_dbo.LabTesting_dbo.LabTest_LabTestID
            HasOptional(a => a.SampleGetting).WithMany(b => b.LabTestings).HasForeignKey(c => c.SampleGettingId).WillCascadeOnDelete(false); // FK_dbo.LabTesting_dbo.SampleGetting_SampleGettingID
        }
    }

    // LabTestingIndex
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class LabTestingIndexConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<LabTestingIndex>
    {
        public LabTestingIndexConfiguration()
            : this("dbo")
        {
        }

        public LabTestingIndexConfiguration(string schema)
        {
            ToTable("LabTestingIndex", schema);
            HasKey(x => x.LabtTestingIndexId);

            Property(x => x.LabtTestingIndexId).HasColumnName(@"LabtTestingIndexID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.LabTestingId).HasColumnName(@"LabTestingID").HasColumnType("int").IsOptional();
            Property(x => x.IndexName).HasColumnName(@"IndexName").HasColumnType("nvarchar").IsOptional().HasMaxLength(20);
            Property(x => x.IndexValue).HasColumnName(@"IndexValue").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.LowNormalHigh).HasColumnName(@"LowNormalHigh").HasColumnType("nvarchar").IsOptional().HasMaxLength(10);
            Property(x => x.NormalRange).HasColumnName(@"NormalRange").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.Unit).HasColumnName(@"Unit").HasColumnType("nvarchar").IsOptional().HasMaxLength(20);
            Property(x => x.IsDeleted).HasColumnName(@"IsDeleted").HasColumnType("bit").IsOptional();

            // Foreign keys
            HasOptional(a => a.LabTesting).WithMany(b => b.LabTestingIndexes).HasForeignKey(c => c.LabTestingId).WillCascadeOnDelete(false); // FK_dbo.LabTestingIndex_dbo.LabTesting_LabTestingID
        }
    }

    // LabTestResult
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class LabTestResultConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<LabTestResult>
    {
        public LabTestResultConfiguration()
            : this("dbo")
        {
        }

        public LabTestResultConfiguration(string schema)
        {
            ToTable("LabTestResult", schema);
            HasKey(x => x.LabTestResultId);

            Property(x => x.LabTestResultId).HasColumnName(@"LabTestResultId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.PatientId).HasColumnName(@"PatientId").HasColumnType("int").IsOptional();
            Property(x => x.CreatedDate).HasColumnName(@"CreatedDate").HasColumnType("datetime").IsOptional();
            Property(x => x.Comment).HasColumnName(@"Comment").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.TotalPrice).HasColumnName(@"TotalPrice").HasColumnType("decimal").IsOptional().HasPrecision(18,0);

            // Foreign keys
            HasOptional(a => a.Patient).WithMany(b => b.LabTestResults).HasForeignKey(c => c.PatientId).WillCascadeOnDelete(false); // FK_LabTestResult_Patient1
        }
    }

    // LabTestResultDetail
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class LabTestResultDetailConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<LabTestResultDetail>
    {
        public LabTestResultDetailConfiguration()
            : this("dbo")
        {
        }

        public LabTestResultDetailConfiguration(string schema)
        {
            ToTable("LabTestResultDetail", schema);
            HasKey(x => x.LabTestResultDetail_);

            Property(x => x.LabTestResultDetail_).HasColumnName(@"LabTestResultDetail").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.LabTestResultId).HasColumnName(@"LabTestResultId").HasColumnType("int").IsRequired();
            Property(x => x.LabTestDetailId).HasColumnName(@"LabTestDetailId").HasColumnType("int").IsOptional();
            Property(x => x.Value).HasColumnName(@"Value").HasColumnType("nvarchar(max)").IsRequired();
            Property(x => x.Price).HasColumnName(@"Price").HasColumnType("decimal").IsOptional().HasPrecision(18,0);

            // Foreign keys
            HasOptional(a => a.LabTestDetail).WithMany(b => b.LabTestResultDetails).HasForeignKey(c => c.LabTestDetailId).WillCascadeOnDelete(false); // FK_LabTestResultDetail_LabTestDetail
            HasRequired(a => a.LabTestResult).WithMany(b => b.LabTestResultDetails).HasForeignKey(c => c.LabTestResultId).WillCascadeOnDelete(false); // FK_LabTestResultDetail_LabTestResult
        }
    }

    // LabTestType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class LabTestTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<LabTestType>
    {
        public LabTestTypeConfiguration()
            : this("dbo")
        {
        }

        public LabTestTypeConfiguration(string schema)
        {
            ToTable("LabTestType", schema);
            HasKey(x => x.LabTestTypeId);

            Property(x => x.LabTestTypeId).HasColumnName(@"LabTestTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.IsDeleted).HasColumnName(@"IsDeleted").HasColumnType("bit").IsRequired();
        }
    }

    // Patient
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class PatientConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Patient>
    {
        public PatientConfiguration()
            : this("dbo")
        {
        }

        public PatientConfiguration(string schema)
        {
            ToTable("Patient", schema);
            HasKey(x => x.PatientId);

            Property(x => x.PatientId).HasColumnName(@"PatientID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.PatientCode).HasColumnName(@"PatientCode").HasColumnType("nvarchar").IsOptional().HasMaxLength(20);
            Property(x => x.AccountId).HasColumnName(@"AccountID").HasColumnType("int").IsOptional();
            Property(x => x.FullName).HasColumnName(@"FullName").HasColumnType("nvarchar").IsOptional().HasMaxLength(100);
            Property(x => x.Gender).HasColumnName(@"Gender").HasColumnType("nvarchar").IsOptional().HasMaxLength(10);
            Property(x => x.DateOfBirth).HasColumnName(@"DateOfBirth").HasColumnType("date").IsOptional();
            Property(x => x.PhoneNumber).HasColumnName(@"PhoneNumber").HasColumnType("nvarchar").IsOptional().HasMaxLength(20);
            Property(x => x.HomeAddress).HasColumnName(@"HomeAddress").HasColumnType("nvarchar").IsOptional().HasMaxLength(200);
            Property(x => x.CompanyAddress).HasColumnName(@"CompanyAddress").HasColumnType("nvarchar").IsOptional().HasMaxLength(200);
            Property(x => x.IsDeleted).HasColumnName(@"IsDeleted").HasColumnType("bit").IsOptional();
            Property(x => x.IsOnline).HasColumnName(@"IsOnline").HasColumnType("bit").IsOptional();
            Property(x => x.IdentityCardNumber).HasColumnName(@"IdentityCardNumber").HasColumnType("nvarchar").IsOptional().HasMaxLength(20);
            Property(x => x.Age).HasColumnName(@"Age").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
        }
    }

    // PatientAccount
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class PatientAccountConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<PatientAccount>
    {
        public PatientAccountConfiguration()
            : this("dbo")
        {
        }

        public PatientAccountConfiguration(string schema)
        {
            ToTable("PatientAccount", schema);
            HasKey(x => x.PatientAccountId);

            Property(x => x.PatientAccountId).HasColumnName(@"PatientAccountID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.AccountId).HasColumnName(@"AccountID").HasColumnType("int").IsRequired();
            Property(x => x.PatientId).HasColumnName(@"PatientID").HasColumnType("int").IsRequired();
            Property(x => x.IsDeleted).HasColumnName(@"IsDeleted").HasColumnType("bit").IsOptional();

            // Foreign keys
            HasRequired(a => a.Account).WithMany(b => b.PatientAccounts).HasForeignKey(c => c.AccountId); // FK_dbo.PatientAccount_dbo.Account_AccountID
            HasRequired(a => a.Patient).WithMany(b => b.PatientAccounts).HasForeignKey(c => c.PatientId); // FK_dbo.PatientAccount_dbo.Patient_PatientID
        }
    }

    // Role
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class RoleConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Role>
    {
        public RoleConfiguration()
            : this("dbo")
        {
        }

        public RoleConfiguration(string schema)
        {
            ToTable("Role", schema);
            HasKey(x => x.RoleId);

            Property(x => x.RoleId).HasColumnName(@"RoleID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.RoleName).HasColumnName(@"RoleName").HasColumnType("nvarchar").IsOptional().HasMaxLength(20);
        }
    }

    // Sample
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class SampleConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Sample>
    {
        public SampleConfiguration()
            : this("dbo")
        {
        }

        public SampleConfiguration(string schema)
        {
            ToTable("Sample", schema);
            HasKey(x => x.SampleId);

            Property(x => x.SampleId).HasColumnName(@"SampleID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.SampleGroupId).HasColumnName(@"SampleGroupID").HasColumnType("int").IsOptional();
            Property(x => x.SampleName).HasColumnName(@"SampleName").HasColumnType("nvarchar").IsOptional().HasMaxLength(20);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsOptional().HasMaxLength(500);
            Property(x => x.IsDeleted).HasColumnName(@"IsDeleted").HasColumnType("bit").IsOptional();

            // Foreign keys
            HasOptional(a => a.SampleGroup).WithMany(b => b.Samples).HasForeignKey(c => c.SampleGroupId).WillCascadeOnDelete(false); // FK_dbo.Sample_dbo.SampleGroup_SampleGroupID
        }
    }

    // SampleGetting
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class SampleGettingConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SampleGetting>
    {
        public SampleGettingConfiguration()
            : this("dbo")
        {
        }

        public SampleGettingConfiguration(string schema)
        {
            ToTable("SampleGetting", schema);
            HasKey(x => x.SampleGettingId);

            Property(x => x.AppointmentId).HasColumnName(@"AppointmentID").HasColumnType("int").IsOptional();
            Property(x => x.SampleId).HasColumnName(@"SampleID").HasColumnType("int").IsOptional();
            Property(x => x.Status).HasColumnName(@"Status").HasColumnType("nvarchar").IsOptional().HasMaxLength(20);
            Property(x => x.IsDeleted).HasColumnName(@"IsDeleted").HasColumnType("bit").IsOptional();
            Property(x => x.SampleGettingCode).HasColumnName(@"SampleGettingCode").HasColumnType("nvarchar").IsOptional().HasMaxLength(20);
            Property(x => x.SampleGettingId).HasColumnName(@"SampleGettingID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.IsPaid).HasColumnName(@"IsPaid").HasColumnType("bit").IsOptional();
            Property(x => x.TableId).HasColumnName(@"TableID").HasColumnType("int").IsOptional();
            Property(x => x.SlotId).HasColumnName(@"SlotID").HasColumnType("int").IsOptional();
            Property(x => x.GettingDate).HasColumnName(@"GettingDate").HasColumnType("date").IsOptional();
            Property(x => x.OrderNumber).HasColumnName(@"OrderNumber").HasColumnType("int").IsOptional();
            Property(x => x.IsGot).HasColumnName(@"IsGot").HasColumnType("bit").IsOptional();

            // Foreign keys
            HasOptional(a => a.Appointment).WithMany(b => b.SampleGettings).HasForeignKey(c => c.AppointmentId).WillCascadeOnDelete(false); // FK_dbo.SampleGetting_dbo.Appointment_AppointmentID
            HasOptional(a => a.Sample).WithMany(b => b.SampleGettings).HasForeignKey(c => c.SampleId).WillCascadeOnDelete(false); // FK_dbo.SampleGetting_dbo.Sample_SampleID
            HasOptional(a => a.Slot).WithMany(b => b.SampleGettings).HasForeignKey(c => c.SlotId).WillCascadeOnDelete(false); // FK_dbo.SampleGetting_dbo.Slot_SlotID
            HasOptional(a => a.Table).WithMany(b => b.SampleGettings).HasForeignKey(c => c.TableId).WillCascadeOnDelete(false); // FK_dbo.SampleGetting_dbo.Table_TableID
        }
    }

    // SampleGroup
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class SampleGroupConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SampleGroup>
    {
        public SampleGroupConfiguration()
            : this("dbo")
        {
        }

        public SampleGroupConfiguration(string schema)
        {
            ToTable("SampleGroup", schema);
            HasKey(x => x.SampleGroupId);

            Property(x => x.SampleGroupId).HasColumnName(@"SampleGroupID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.GroupName).HasColumnName(@"GroupName").HasColumnType("nvarchar").IsOptional().HasMaxLength(100);
            Property(x => x.GettingDuration).HasColumnName(@"GettingDuration").HasColumnType("int").IsOptional();
            Property(x => x.OpenTime).HasColumnName(@"OpenTime").HasColumnType("int").IsOptional();
            Property(x => x.CloseTime).HasColumnName(@"CloseTime").HasColumnType("int").IsOptional();
            Property(x => x.IsDeleted).HasColumnName(@"IsDeleted").HasColumnType("bit").IsOptional();
        }
    }

    // Slot
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class SlotConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Slot>
    {
        public SlotConfiguration()
            : this("dbo")
        {
        }

        public SlotConfiguration(string schema)
        {
            ToTable("Slot", schema);
            HasKey(x => x.SlotId);

            Property(x => x.StartTime).HasColumnName(@"StartTime").HasColumnType("int").IsOptional();
            Property(x => x.FinishTime).HasColumnName(@"FinishTime").HasColumnType("int").IsOptional();
            Property(x => x.SlotId).HasColumnName(@"SlotID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.SlotName).HasColumnName(@"SlotName").HasColumnType("nvarchar").IsOptional().HasMaxLength(10);
            Property(x => x.SampleGroupId).HasColumnName(@"SampleGroupId").HasColumnType("int").IsOptional();
            Property(x => x.IsDeleted).HasColumnName(@"IsDeleted").HasColumnType("bit").IsOptional();

            // Foreign keys
            HasOptional(a => a.SampleGroup).WithMany(b => b.Slots).HasForeignKey(c => c.SampleGroupId).WillCascadeOnDelete(false); // FK_dbo.Slot_dbo.SampleGroup_SampleGroupId
        }
    }

    // Supply
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class SupplyConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Supply>
    {
        public SupplyConfiguration()
            : this("dbo")
        {
        }

        public SupplyConfiguration(string schema)
        {
            ToTable("Supply", schema);
            HasKey(x => x.SuppliesId);

            Property(x => x.SuppliesId).HasColumnName(@"SuppliesId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.SuppliesCode).HasColumnName(@"SuppliesCode").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.SuppliesName).HasColumnName(@"SuppliesName").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.SuppliesTypeId).HasColumnName(@"SuppliesTypeId").HasColumnType("int").IsOptional();
            Property(x => x.Quantity).HasColumnName(@"Quantity").HasColumnType("int").IsOptional();
            Property(x => x.Unit).HasColumnName(@"Unit").HasColumnType("nvarchar").IsOptional().HasMaxLength(20);
            Property(x => x.Note).HasColumnName(@"Note").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.IsDeleted).HasColumnName(@"IsDeleted").HasColumnType("bit").IsOptional();

            // Foreign keys
            HasOptional(a => a.SupplyType).WithMany(b => b.Supplies).HasForeignKey(c => c.SuppliesTypeId).WillCascadeOnDelete(false); // FK_dbo.Supply_dbo.SupplyType_SuppliesTypeId
        }
    }

    // SupplyType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class SupplyTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SupplyType>
    {
        public SupplyTypeConfiguration()
            : this("dbo")
        {
        }

        public SupplyTypeConfiguration(string schema)
        {
            ToTable("SupplyType", schema);
            HasKey(x => x.SuppliesTypeId);

            Property(x => x.SuppliesTypeId).HasColumnName(@"SuppliesTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.SuppliesTypeName).HasColumnName(@"SuppliesTypeName").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.IsDeleted).HasColumnName(@"IsDeleted").HasColumnType("bit").IsOptional();
        }
    }

    // database_firewall_rules
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class sys_DatabaseFirewallRuleConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<database_firewall_rules>
    {
        public sys_DatabaseFirewallRuleConfiguration()
            : this("sys")
        {
        }

        public sys_DatabaseFirewallRuleConfiguration(string schema)
        {
            ToTable("database_firewall_rules", schema);
            HasKey(x => new { x.Id, x.Name, x.StartIpAddress, x.EndIpAddress, x.CreateDate, x.ModifyDate });

            Property(x => x.Id).HasColumnName(@"id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"name").HasColumnType("nvarchar").IsRequired().HasMaxLength(128).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StartIpAddress).HasColumnName(@"start_ip_address").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(45).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EndIpAddress).HasColumnName(@"end_ip_address").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(45).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"create_date").HasColumnType("datetime").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ModifyDate).HasColumnName(@"modify_date").HasColumnType("datetime").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
        }
    }

    // Table
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class TableConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Table>
    {
        public TableConfiguration()
            : this("dbo")
        {
        }

        public TableConfiguration(string schema)
        {
            ToTable("Table", schema);
            HasKey(x => x.TableId);

            Property(x => x.TableId).HasColumnName(@"TableID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.SampleGroupId).HasColumnName(@"SampleGroupID").HasColumnType("int").IsOptional();
            Property(x => x.TableName).HasColumnName(@"TableName").HasColumnType("nchar").IsOptional().IsFixedLength().HasMaxLength(10);
            Property(x => x.IsDeleted).HasColumnName(@"IsDeleted").HasColumnType("bit").IsOptional();

            // Foreign keys
            HasOptional(a => a.SampleGroup).WithMany(b => b.Tables).HasForeignKey(c => c.SampleGroupId).WillCascadeOnDelete(false); // FK_dbo.Table_dbo.SampleGroup_SampleGroupID
        }
    }

    // Token
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class TokenConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Token>
    {
        public TokenConfiguration()
            : this("dbo")
        {
        }

        public TokenConfiguration(string schema)
        {
            ToTable("Token", schema);
            HasKey(x => x.TokenId);

            Property(x => x.TokenString).HasColumnName(@"TokenString").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.IsDeleted).HasColumnName(@"IsDeleted").HasColumnType("bit").IsOptional();
            Property(x => x.TokenId).HasColumnName(@"TokenID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
        }
    }

    #endregion

    #region Stored procedure return models

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class GetFistAvailableTableReturnModel
    {
        public System.Int32 TableID { get; set; }
        public System.Int32 TableID1 { get; set; }
        public System.Int32? SampleGroupID { get; set; }
        public System.String TableName { get; set; }
        public System.Boolean? IsDeleted { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class GetSlotUsageReturnModel
    {
        public System.Int32? StartTime { get; set; }
        public System.Int32? FinishTime { get; set; }
        public System.Int32? SlotID { get; set; }
        public System.String SlotName { get; set; }
        public System.Int32? SampleGroupId { get; set; }
        public System.Boolean? IsDeleted { get; set; }
        public System.Int32? aps { get; set; }
    }

    #endregion

}
// </auto-generated>
